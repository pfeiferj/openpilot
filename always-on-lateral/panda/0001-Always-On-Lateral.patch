From 43d1a6c7486a6ff9b2629136acc7a61eddeec8e8 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Tue, 20 Feb 2024 18:57:44 -0500
Subject: [PATCH] Always On Lateral

Safety code for Always On Lateral. On supported cars this allows lateral
commands to be sent in situations where longitudinal commands are not
allowed. Supports alt experience flags to ensure stock behavior when
always on lateral is not enabled.
---
 board/safety.h                         | 39 ++++++++++++++++++++++----
 board/safety/safety_chrysler.h         |  3 ++
 board/safety/safety_ford.h             |  3 ++
 board/safety/safety_gm.h               |  3 ++
 board/safety/safety_honda.h            |  6 +++-
 board/safety/safety_hyundai_common.h   |  6 ++++
 board/safety/safety_mazda.h            |  3 ++
 board/safety/safety_nissan.h           | 13 +++++++++
 board/safety/safety_subaru.h           |  3 ++
 board/safety/safety_subaru_preglobal.h |  3 ++
 board/safety/safety_tesla.h            | 10 +++++++
 board/safety/safety_toyota.h           |  8 ++++++
 board/safety_declarations.h            |  7 +++++
 python/__init__.py                     |  3 ++
 14 files changed, 104 insertions(+), 6 deletions(-)

diff --git a/board/safety.h b/board/safety.h
index 048d7cca..2b8bc15e 100644
--- a/board/safety.h
+++ b/board/safety.h
@@ -545,8 +545,18 @@ bool longitudinal_brake_checks(int desired_brake, const LongitudinalLimits limit
 bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLimits limits) {
   bool violation = false;
   uint32_t ts = microsecond_timer_get();
+  // PFEIFER - AOL {{
+  bool aol_allowed = acc_main_on && (alternative_experience & ALT_EXP_ENABLE_ALWAYS_ON_LATERAL);
+  if(controls_allowed) {
+    // acc main must be on if controls are allowed
+    acc_main_on = controls_allowed;
+  }
+  // }} PFEIFER - AOL
 
-  if (controls_allowed) {
+  //if (controls_allowed) {
+  // PFEIFER - AOL {{
+  if (controls_allowed || aol_allowed) {
+  // }} PFEIFER - AOL
     // *** global torque limit check ***
     violation |= max_limit_check(desired_torque, limits.max_steer, -limits.max_steer);
 
@@ -573,7 +583,10 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
   }
 
   // no torque if controls is not allowed
-  if (!controls_allowed && (desired_torque != 0)) {
+  // if (!controls_allowed && (desired_torque != 0)) {
+  // PFEIFER - AOL {{
+  if (!(controls_allowed || aol_allowed) && (desired_torque != 0)) {
+  // }} PFEIFER - AOL
     violation = true;
   }
 
@@ -615,7 +628,10 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
   }
 
   // reset to 0 if either controls is not allowed or there's a violation
-  if (violation || !controls_allowed) {
+  // if (violation || !controls_allowed) {
+  // PFEIFER - AOL {{
+  if (violation || !(controls_allowed || aol_allowed)) {
+  // }} PFEIFER - AOL
     valid_steer_req_count = 0;
     invalid_steer_req_count = 0;
     desired_torque_last = 0;
@@ -630,8 +646,18 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
 // Safety checks for angle-based steering commands
 bool steer_angle_cmd_checks(int desired_angle, bool steer_control_enabled, const SteeringLimits limits) {
   bool violation = false;
+  // PFEIFER - AOL {{
+  bool aol_allowed = acc_main_on && (alternative_experience & ALT_EXP_ENABLE_ALWAYS_ON_LATERAL);
+  if(controls_allowed) {
+    // acc main must be on if controls are allowed
+    acc_main_on = controls_allowed;
+  }
+  // }} PFEIFER - AOL
 
-  if (controls_allowed && steer_control_enabled) {
+  // if (controls_allowed && steer_control_enabled) {
+  // PFEIFER - AOL {{
+  if ((controls_allowed || aol_allowed) && steer_control_enabled) {
+  // }} PFEIFER - AOL
     // convert floating point angle rate limits to integers in the scale of the desired angle on CAN,
     // add 1 to not false trigger the violation. also fudge the speed by 1 m/s so rate limits are
     // always slightly above openpilot's in case we read an updated speed in between angle commands
@@ -674,7 +700,10 @@ bool steer_angle_cmd_checks(int desired_angle, bool steer_control_enabled, const
   }
 
   // No angle control allowed when controls are not allowed
-  violation |= !controls_allowed && steer_control_enabled;
+  // violation |= !controls_allowed && steer_control_enabled;
+  // PFEIFER - AOL {{
+  violation |= !(controls_allowed || aol_allowed) && steer_control_enabled;
+  // }} PFEIFER - AOL
 
   return violation;
 }
diff --git a/board/safety/safety_chrysler.h b/board/safety/safety_chrysler.h
index be27832c..b9e6844e 100644
--- a/board/safety/safety_chrysler.h
+++ b/board/safety/safety_chrysler.h
@@ -186,6 +186,9 @@ static void chrysler_rx_hook(const CANPacket_t *to_push) {
   // enter controls on rising edge of ACC, exit controls on ACC off
   const int das_3_bus = (chrysler_platform == CHRYSLER_PACIFICA) ? 0 : 2;
   if ((bus == das_3_bus) && (addr == chrysler_addrs->DAS_3)) {
+    // PFEIFER - AOL {{
+    acc_main_on = GET_BIT(to_push, 20U);
+      // }} PFEIFER - AOL
     bool cruise_engaged = GET_BIT(to_push, 21U);
     pcm_cruise_check(cruise_engaged);
   }
diff --git a/board/safety/safety_ford.h b/board/safety/safety_ford.h
index d6ee2080..4907ee9e 100644
--- a/board/safety/safety_ford.h
+++ b/board/safety/safety_ford.h
@@ -245,6 +245,9 @@ static void ford_rx_hook(const CANPacket_t *to_push) {
 
       // Signal: CcStat_D_Actl
       unsigned int cruise_state = GET_BYTE(to_push, 1) & 0x07U;
+      // PFEIFER - AOL {{
+      acc_main_on = (cruise_state == 3U) ||(cruise_state == 4U) || (cruise_state == 5U);
+      // }} PFEIFER - AOL
       bool cruise_engaged = (cruise_state == 4U) || (cruise_state == 5U);
       pcm_cruise_check(cruise_engaged);
     }
diff --git a/board/safety/safety_gm.h b/board/safety/safety_gm.h
index 09ac34ec..1644ab9a 100644
--- a/board/safety/safety_gm.h
+++ b/board/safety/safety_gm.h
@@ -111,6 +111,9 @@ static void gm_rx_hook(const CANPacket_t *to_push) {
     }
 
     if ((addr == 0xC9) && (gm_hw == GM_CAM)) {
+      // PFEIFER - AOL {{
+      acc_main_on = GET_BIT(to_push, 29U);
+      // }} PFEIFER - AOL
       brake_pressed = GET_BIT(to_push, 40U);
     }
 
diff --git a/board/safety/safety_honda.h b/board/safety/safety_honda.h
index 630f6d73..e9b1808c 100644
--- a/board/safety/safety_honda.h
+++ b/board/safety/safety_honda.h
@@ -294,7 +294,11 @@ static bool honda_tx_hook(const CANPacket_t *to_send) {
 
   // STEER: safety check
   if ((addr == 0xE4) || (addr == 0x194)) {
-    if (!controls_allowed) {
+    // if (!controls_allowed) {
+    // PFEIFER - AOL {{
+    bool aol_allowed = acc_main_on && (alternative_experience & ALT_EXP_DISABLE_DISENGAGE_ON_GAS);
+    if (!(controls_allowed || aol_allowed)) {
+    // }}
       bool steer_applied = GET_BYTE(to_send, 0) | GET_BYTE(to_send, 1);
       if (steer_applied) {
         tx = false;
diff --git a/board/safety/safety_hyundai_common.h b/board/safety/safety_hyundai_common.h
index 54ea0f02..de56d2a4 100644
--- a/board/safety/safety_hyundai_common.h
+++ b/board/safety/safety_hyundai_common.h
@@ -63,6 +63,12 @@ void hyundai_common_cruise_state_check(const bool cruise_engaged) {
 }
 
 void hyundai_common_cruise_buttons_check(const int cruise_button, const bool main_button) {
+  // PFEIFER - AOL {{
+  if(main_button && main_button != cruise_main_prev) {
+    acc_main_on = !acc_main_on;
+  }
+  cruise_main_prev = main_button;
+  // }} PFEIFER - AOL
   if ((cruise_button == HYUNDAI_BTN_RESUME) || (cruise_button == HYUNDAI_BTN_SET) || (cruise_button == HYUNDAI_BTN_CANCEL) || main_button) {
     hyundai_last_button_interaction = 0U;
   } else {
diff --git a/board/safety/safety_mazda.h b/board/safety/safety_mazda.h
index 7c6d8be9..886185b0 100644
--- a/board/safety/safety_mazda.h
+++ b/board/safety/safety_mazda.h
@@ -52,6 +52,9 @@ static void mazda_rx_hook(const CANPacket_t *to_push) {
 
     // enter controls on rising edge of ACC, exit controls on ACC off
     if (addr == MAZDA_CRZ_CTRL) {
+      // PFEIFER - AOL {{
+      acc_main_on = GET_BIT(to_push, 17U);
+      // }} PFEIFER - AOL
       bool cruise_engaged = GET_BYTE(to_push, 0) & 0x8U;
       pcm_cruise_check(cruise_engaged);
     }
diff --git a/board/safety/safety_nissan.h b/board/safety/safety_nissan.h
index c2406260..17f577e2 100644
--- a/board/safety/safety_nissan.h
+++ b/board/safety/safety_nissan.h
@@ -21,6 +21,10 @@ const CanMsg NISSAN_TX_MSGS[] = {
 
 // Signals duplicated below due to the fact that these messages can come in on either CAN bus, depending on car model.
 RxCheck nissan_rx_checks[] = {
+  // PFEIFER - AOL {{
+  {.msg = {{0x1b6, 0, 8, .frequency = 100U},
+           {0x1b6, 1, 8, .frequency = 100U}, { 0 }}},  // PRO_PILOT
+  // }} PFEIFER - AOL
   {.msg = {{0x2, 0, 5, .frequency = 100U},
            {0x2, 1, 5, .frequency = 100U}, { 0 }}},  // STEER_ANGLE_SENSOR
   {.msg = {{0x285, 0, 8, .frequency = 50U},
@@ -64,11 +68,20 @@ static void nissan_rx_hook(const CANPacket_t *to_push) {
       UPDATE_VEHICLE_SPEED((right_rear + left_rear) / 2.0 * 0.005 / 3.6);
     }
 
+    // PFEIFER - AOL {{
+    if (addr == 0x1b6) {
+      acc_main_on = GET_BIT(to_push, 36U);
+    }
+    // }} PFEIFER - AOL
+
     // X-Trail 0x15c, Leaf 0x239
     if ((addr == 0x15c) || (addr == 0x239)) {
       if (addr == 0x15c){
         gas_pressed = ((GET_BYTE(to_push, 5) << 2) | ((GET_BYTE(to_push, 6) >> 6) & 0x3U)) > 3U;
       } else {
+        // PFEIFER - AOL {{
+        acc_main_on = GET_BIT(to_push, 17U);
+        // }} PFEIFER - AOL
         gas_pressed = GET_BYTE(to_push, 0) > 3U;
       }
     }
diff --git a/board/safety/safety_subaru.h b/board/safety/safety_subaru.h
index 581dc50b..32184c4a 100644
--- a/board/safety/safety_subaru.h
+++ b/board/safety/safety_subaru.h
@@ -152,6 +152,9 @@ static void subaru_rx_hook(const CANPacket_t *to_push) {
 
   // enter controls on rising edge of ACC, exit controls on ACC off
   if ((addr == MSG_SUBARU_CruiseControl) && (bus == alt_main_bus)) {
+    // PFEIFER - AOL {{
+    acc_main_on = GET_BIT(to_push, 40U);
+    // }} PFEIFER - AOL
     bool cruise_engaged = GET_BIT(to_push, 41U);
     pcm_cruise_check(cruise_engaged);
   }
diff --git a/board/safety/safety_subaru_preglobal.h b/board/safety/safety_subaru_preglobal.h
index 1047814a..92f33098 100644
--- a/board/safety/safety_subaru_preglobal.h
+++ b/board/safety/safety_subaru_preglobal.h
@@ -56,6 +56,9 @@ static void subaru_preglobal_rx_hook(const CANPacket_t *to_push) {
 
     // enter controls on rising edge of ACC, exit controls on ACC off
     if (addr == MSG_SUBARU_PG_CruiseControl) {
+      // PFEIFER - AOL {{
+      acc_main_on = GET_BIT(to_push, 48U);
+      // }} PFEIFER - AOL
       bool cruise_engaged = GET_BIT(to_push, 49U);
       pcm_cruise_check(cruise_engaged);
     }
diff --git a/board/safety/safety_tesla.h b/board/safety/safety_tesla.h
index 652161ff..c686ed5b 100644
--- a/board/safety/safety_tesla.h
+++ b/board/safety/safety_tesla.h
@@ -100,6 +100,16 @@ static void tesla_rx_hook(const CANPacket_t *to_push) {
     if(addr == (tesla_powertrain ? 0x256 : 0x368)) {
       // Cruise state
       int cruise_state = (GET_BYTE(to_push, 1) >> 4);
+
+      // PFEIFER - AOL {{
+      acc_main_on = (cruise_state == 1) ||  // STANDBY
+        (cruise_state == 2) ||  // ENABLED
+        (cruise_state == 3) ||  // STANDSTILL
+        (cruise_state == 4) ||  // OVERRIDE
+        (cruise_state == 6) ||  // PRE_FAULT
+        (cruise_state == 7);    // PRE_CANCEL
+      // }} PFEIFER - AOL
+
       bool cruise_engaged = (cruise_state == 2) ||  // ENABLED
                             (cruise_state == 3) ||  // STANDSTILL
                             (cruise_state == 4) ||  // OVERRIDE
diff --git a/board/safety/safety_toyota.h b/board/safety/safety_toyota.h
index 05f84e46..cbf6eb1f 100644
--- a/board/safety/safety_toyota.h
+++ b/board/safety/safety_toyota.h
@@ -47,6 +47,8 @@ const LongitudinalLimits TOYOTA_LONG_LIMITS = {
   {0x128, 1, 6}, {0x141, 1, 4}, {0x160, 1, 8}, {0x161, 1, 7}, {0x470, 1, 4},  /* DSU bus 1 */                                               \
   {0x411, 0, 8},  /* PCS_HUD */                                                                                                             \
   {0x750, 0, 8},  /* radar diagnostic address */                                                                                            \
+  {0x2E4, 0, 5}, {0x191, 0, 8}, {0x412, 0, 8}, {0x343, 0, 8}, {0x1D2, 0, 8},  /* LKAS + ACC */                                              \
+  {0x1D3, 0, 8},                                                                                                                            \
 
 const CanMsg TOYOTA_TX_MSGS[] = {
   TOYOTA_COMMON_TX_MSGS
@@ -62,6 +64,7 @@ const CanMsg TOYOTA_LONG_TX_MSGS[] = {
   {.msg = {{0x1D2, 0, 8, .check_checksum = true, .frequency = 33U}, { 0 }, { 0 }}},                         \
   {.msg = {{0x224, 0, 8, .check_checksum = false, .frequency = 40U},                                        \
            {0x226, 0, 8, .check_checksum = false, .frequency = 40U}, { 0 }}},                               \
+  {.msg = {{0x1D3, 0, 8, .check_checksum = true, .frequency = 33U}, { 0 }, { 0 }}},                         \
 
 RxCheck toyota_lka_rx_checks[] = {
   TOYOTA_COMMON_RX_CHECKS(false)
@@ -143,6 +146,11 @@ static void toyota_rx_hook(const CANPacket_t *to_push) {
         update_sample(&angle_meas, angle_meas_new);
       }
     }
+    // PFEIFER - AOL {{
+    if (addr == 0x1D3) {
+      acc_main_on = GET_BIT(to_push, 15U);
+    }
+    // }} PFEIFER - AOL
 
     // enter controls on rising edge of ACC, exit controls on ACC off
     // exit controls on rising edge of gas press
diff --git a/board/safety_declarations.h b/board/safety_declarations.h
index 4140f56e..d0627b61 100644
--- a/board/safety_declarations.h
+++ b/board/safety_declarations.h
@@ -221,6 +221,9 @@ struct sample_t vehicle_speed;
 bool vehicle_moving = false;
 bool acc_main_on = false;  // referred to as "ACC off" in ISO 15622:2018
 int cruise_button_prev = 0;
+// PFEIFER - AOL {{
+bool cruise_main_prev = false;
+// }} PFEIFER - AOL
 bool safety_rx_checks_invalid = false;
 
 // for safety modes with torque steering control
@@ -266,3 +269,7 @@ int alternative_experience = 0;
 uint32_t safety_mode_cnt = 0U;
 // allow 1s of transition timeout after relay changes state before assessing malfunctioning
 const uint32_t RELAY_TRNS_TIMEOUT = 1U;
+
+// PFEIFER - AOL {{
+#define ALT_EXP_ENABLE_ALWAYS_ON_LATERAL 32
+// }} PFEIFER - AOL
diff --git a/python/__init__.py b/python/__init__.py
index a18fdc5f..f087df75 100644
--- a/python/__init__.py
+++ b/python/__init__.py
@@ -111,6 +111,9 @@ class ALTERNATIVE_EXPERIENCE:
   DISABLE_STOCK_AEB = 2
   RAISE_LONGITUDINAL_LIMITS_TO_ISO_MAX = 8
   ALLOW_AEB = 16
+  # PFEIFER - AOL {{
+  ENABLE_ALWAYS_ON_LATERAL = 32
+  # }} PFEIFER - AOL
 
 class Panda:
 
-- 
2.39.2

