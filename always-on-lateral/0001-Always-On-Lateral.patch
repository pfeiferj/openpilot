From 9bf6ad9ea494f912d15769e2e6d1274370aae6ad Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Fri, 29 Mar 2024 21:40:13 -0400
Subject: [PATCH] Always On Lateral

Provides support for Always On Lateral on some cars. Note that always on
lateral requires changes to panda safety code so please refer to the
corresponding panda commit to read and understand those changes. To
engage lateral you must have engaged cruise control at least once after
pressing the main button. Once cruise control has been engaged lateral
will remain on after a brake press or the cancel button has been
pressed. Pressing the cruise main button again will disable lateral
control.
---
 common/params.cc                        |  13 ++
 panda                                   |   2 +-
 release/files_common                    |   2 +
 selfdrive/car/card.py                   |   7 +
 selfdrive/car/hyundai/carstate.py       |  28 ++-
 selfdrive/controls/always_on_lateral.py | 270 ++++++++++++++++++++++++
 selfdrive/controls/controlsd.py         |  14 ++
 selfdrive/ui/qt/offroad/settings.cc     |  57 +++++
 selfdrive/ui/qt/onroad.cc               |   5 +
 selfdrive/ui/ui.h                       |   6 +
 10 files changed, 401 insertions(+), 3 deletions(-)
 create mode 100644 selfdrive/controls/always_on_lateral.py

diff --git a/common/params.cc b/common/params.cc
index 38d96a30b..e07fedd96 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -207,6 +207,19 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"UpdaterTargetBranch", CLEAR_ON_MANAGER_START},
     {"UpdaterLastFetchTime", PERSISTENT},
     {"Version", PERSISTENT},
+
+    // PFEIFER - AOL {{
+    {"AlwaysOnLateralEnabled", PERSISTENT},
+    {"AlwaysOnLateralEnabledLock", PERSISTENT | CLEAR_ON_OFFROAD_TRANSITION},
+    {"AlwaysOnLateralEnabledConfirmed", PERSISTENT},
+    {"AlwaysOnLateralMainEnablesConfirmed", PERSISTENT},
+    {"AlwaysOnLateralMainEnables", PERSISTENT},
+    {"LateralActive", CLEAR_ON_MANAGER_START | CLEAR_ON_ONROAD_TRANSITION},
+    {"DisengageLatOnBrake", PERSISTENT},
+    {"DisengageLatOnBlinker", PERSISTENT},
+    {"DisengageLatOnLowSpeedBlinker", PERSISTENT},
+    {"LatBlinkerLowSpeedLimit", PERSISTENT},
+    // }} PFEIFER - AOL
 };
 
 } // namespace
diff --git a/panda b/panda
index 01c54d119..56be13eea 160000
--- a/panda
+++ b/panda
@@ -1 +1 @@
-Subproject commit 01c54d11990fb82b85acc322a6e2e34a4b7ee389
+Subproject commit 56be13eeacc31390691f5e427bf7c992a062b247
diff --git a/release/files_common b/release/files_common
index b00f99906..e332f811d 100644
--- a/release/files_common
+++ b/release/files_common
@@ -565,3 +565,5 @@ tinygrad_repo/tinygrad/runtime/ops_disk.py
 tinygrad_repo/tinygrad/runtime/ops_gpu.py
 tinygrad_repo/tinygrad/shape/*
 tinygrad_repo/tinygrad/*.py
+
+selfdrive/controls/always_on_lateral.py
diff --git a/selfdrive/car/card.py b/selfdrive/car/card.py
index 82335500d..1165a9e55 100755
--- a/selfdrive/car/card.py
+++ b/selfdrive/car/card.py
@@ -15,6 +15,10 @@ from openpilot.selfdrive.boardd.boardd import can_list_to_can_capnp
 from openpilot.selfdrive.car.car_helpers import get_car, get_one_can
 from openpilot.selfdrive.car.interfaces import CarInterfaceBase
 
+# PFEIFER - AOL {{
+from openpilot.selfdrive.controls.always_on_lateral import AlwaysOnLateral
+# }} PFEIFER - AOL
+
 
 REPLAY = "REPLAY" in os.environ
 
@@ -53,6 +57,9 @@ class CarD:
     self.CP.alternativeExperience = 0
     if not disengage_on_accelerator:
       self.CP.alternativeExperience |= ALTERNATIVE_EXPERIENCE.DISABLE_DISENGAGE_ON_GAS
+    # PFEIFER - AOL {{
+    self.CP.alternativeExperience |= AlwaysOnLateral.alternative_experience()
+    # }} PFEIFER - AOL
 
     car_recognized = self.CP.carName != 'mock'
     openpilot_enabled_toggle = self.params.get_bool("OpenpilotEnabledToggle")
diff --git a/selfdrive/car/hyundai/carstate.py b/selfdrive/car/hyundai/carstate.py
index eac91d529..3f1513175 100644
--- a/selfdrive/car/hyundai/carstate.py
+++ b/selfdrive/car/hyundai/carstate.py
@@ -52,6 +52,10 @@ class CarState(CarStateBase):
 
     self.params = CarControllerParams(CP)
 
+    # PFEIFER - AOL {{
+    self.main_enabled = False
+    # }} PFEIFER - AOL
+
   def update(self, cp, cp_cam):
     if self.CP.carFingerprint in CANFD_CAR:
       return self.update_canfd(cp, cp_cam)
@@ -102,7 +106,10 @@ class CarState(CarStateBase):
     # cruise state
     if self.CP.openpilotLongitudinalControl:
       # These are not used for engage/disengage since openpilot keeps track of state using the buttons
-      ret.cruiseState.available = cp.vl["TCS13"]["ACCEnable"] == 0
+      # ret.cruiseState.available = cp.vl["TCS13"]["ACCEnable"] == 0
+      # PFEIFER - AOL {{
+      ret.cruiseState.available = self.main_enabled
+      # }} PFEIFER - AOL
       ret.cruiseState.enabled = cp.vl["TCS13"]["ACC_REQ"] == 1
       ret.cruiseState.standstill = False
       ret.cruiseState.nonAdaptive = False
@@ -162,7 +169,14 @@ class CarState(CarStateBase):
     self.steer_state = cp.vl["MDPS12"]["CF_Mdps_ToiActive"]  # 0 NOT ACTIVE, 1 ACTIVE
     self.prev_cruise_buttons = self.cruise_buttons[-1]
     self.cruise_buttons.extend(cp.vl_all["CLU11"]["CF_Clu_CruiseSwState"])
+    # PFEIFER - AOL {{
+    self.prev_main_buttons = self.main_buttons[-1]
+    # }} PFEIFER - AOL
     self.main_buttons.extend(cp.vl_all["CLU11"]["CF_Clu_CruiseSwMain"])
+    # PFEIFER - AOL {{
+    if self.prev_main_buttons == 0 and self.main_buttons[-1] != 0:
+      self.main_enabled = not self.main_enabled
+    # }} PFEIFER - AOL
 
     return ret
 
@@ -217,7 +231,10 @@ class CarState(CarStateBase):
 
     # cruise state
     # CAN FD cars enable on main button press, set available if no TCS faults preventing engagement
-    ret.cruiseState.available = cp.vl["TCS"]["ACCEnable"] == 0
+    # ret.cruiseState.available = cp.vl["TCS"]["ACCEnable"] == 0
+    # PFEIFER - AOL {{
+    ret.cruiseState.available = self.main_enabled
+    # }} PFEIFER - AOL
     if self.CP.openpilotLongitudinalControl:
       # These are not used for engage/disengage since openpilot keeps track of state using the buttons
       ret.cruiseState.enabled = cp.vl["TCS"]["ACC_REQ"] == 1
@@ -238,7 +255,14 @@ class CarState(CarStateBase):
 
     self.prev_cruise_buttons = self.cruise_buttons[-1]
     self.cruise_buttons.extend(cp.vl_all[self.cruise_btns_msg_canfd]["CRUISE_BUTTONS"])
+    # PFEIFER - AOL {{
+    self.prev_main_buttons = self.main_buttons[-1]
+    # }} PFEIFER - AOL
     self.main_buttons.extend(cp.vl_all[self.cruise_btns_msg_canfd]["ADAPTIVE_CRUISE_MAIN_BTN"])
+    # PFEIFER - AOL {{
+    if self.prev_main_buttons == 0 and self.main_buttons[-1] != 0:
+      self.main_enabled = not self.main_enabled
+    # }} PFEIFER - AOL
     self.buttons_counter = cp.vl[self.cruise_btns_msg_canfd]["COUNTER"]
     ret.accFaulted = cp.vl["TCS"]["ACCEnable"] != 0  # 0 ACC CONTROL ENABLED, 1-3 ACC CONTROL DISABLED
 
diff --git a/selfdrive/controls/always_on_lateral.py b/selfdrive/controls/always_on_lateral.py
new file mode 100644
index 000000000..5a5c5f55c
--- /dev/null
+++ b/selfdrive/controls/always_on_lateral.py
@@ -0,0 +1,270 @@
+# PFEIFER - AOL
+
+# Acknowledgements:
+# Huge thanks to the following forks, much of my initial implementation used these as a reference:
+#   * Sunnypilot - https://github.com/sunnyhaibin/sunnypilot
+#   * Ghostpilot - https://github.com/spektor56/ghostpilot
+#   * Alexander Sato's fork - https://github.com/AlexandreSato/openpilot/tree/personal3
+#
+# Another huge thanks goes out to Frogai. Working with him on Toyota support lead to a pretty generic method to support
+# nearly every brand. https://github.com/frogAi/FrogPilot
+#
+# A huge thanks also goes out to nworby for his continued attention to detail and diligence that has lead to many
+# improvements to the safety of this implementation
+
+import time
+
+from cereal import log, car
+from openpilot.common.params import Params
+from openpilot.selfdrive.controls.lib.latcontrol import MIN_LATERAL_CONTROL_SPEED
+from panda import ALTERNATIVE_EXPERIENCE
+from openpilot.selfdrive.controls.lib.events import EngagementAlert, AudibleAlert
+from openpilot.selfdrive.controls.lib.events import ET
+from openpilot.common.realtime import DT_CTRL
+
+State = log.ControlsState.OpenpilotState
+ACTIVE_STATES = (State.enabled, State.softDisabling, State.overriding)
+
+params = Params()
+mem_params = Params("/dev/shm/params")
+"""
+A speed optimization, Params with a base path in /dev/shm/params.
+
+/dev/shm is a memory mapped folder and does not persistently store across
+reboots. The advantage to using a memory mapped folder is that it should be
+very fast and consistent for both writes and reads.
+
+If using the real filesystem placing data can, in extreme circumstances,
+take over 1 second. put_bool_nonblocking helps with this by creating a
+thread but this can create race conditions. If we need to block but don't
+care about persistence across reboots the memory mapped location should
+avoid random lag.
+"""
+
+SOFT_DISABLE_TIME = 3  # seconds
+
+class AlwaysOnLateral:
+  def __init__(self, controls):
+    self.CI = controls.CI
+    self.AM = controls.AM
+    self.sm = controls.sm
+    self.controls = controls
+
+    # UI Toggles
+    self.disengage_lat_on_brake: bool = False
+    self.disengage_lat_on_blinker: bool = False
+
+    # Car State
+    self.braking: bool = False
+    self.blinkers_active: bool = False
+    self.standstill: bool = False
+    self.steer_fault: bool = False
+    self.invalid_gear: bool = False
+    self.cruise_available: bool = False
+    self.cruise_enabled: bool = False
+    self.blinker_low_speed = False
+
+    # OP/AOL states
+    self.cruise_previously_engaged: bool = False
+    self.last_lat_allowed: bool = False
+    self.op_active: bool = False
+    self.prev_lat_active: bool = False
+    self.calibrated: bool = False
+    self.start_time = time.time() # seconds
+
+    # This is used to disable aol in the event that openpilot has received a
+    # disable event. aol will only be re-enabled once openpilot has been
+    # re-engaged.
+    self.disabled: bool = False
+    self.soft_disabling: bool = False
+    self.soft_disable_timer: float = 0.0
+
+    params.put_bool("AlwaysOnLateralEnabledLock", True) # locks toggle when onroad
+    # sets the default blinker low speed limit to 25 mph if not already set
+    AlwaysOnLateral.set_default_lat_blinker_low_speed_limit(11.176)
+
+    # we only need to check these once since we are locking these toggles while onroad
+    self.enabled = params.get_bool('AlwaysOnLateralEnabled')
+    self.main_enables = params.get_bool('AlwaysOnLateralMainEnables')
+    self.disengage_lat_on_brake = params.get_bool('DisengageLatOnBrake')
+    self.disengage_lat_on_blinker = params.get_bool('DisengageLatOnBlinker')
+    self.disengage_lat_on_low_speed_blinker = params.get_bool('DisengageLatOnLowSpeedBlinker')
+    self.blinker_low_speed_limit = float(params.get('LatBlinkerLowSpeedLimit').decode()) # m/s
+
+  @staticmethod
+  def set_default_lat_blinker_low_speed_limit(limit: float) -> None:
+    """
+    sets a default low speed blinker limit
+    """
+    try:
+      float(params.get("LatBlinkerLowSpeedLimit").decode())
+    except:
+      params.put("LatBlinkerLowSpeedLimit", str(limit))
+
+  def handle_audible_alert(self, lateral_allowed: bool):
+    """
+    Plays the engagement/disengagement sound when lateral allowed is toggled
+    """
+    if self.last_lat_allowed != lateral_allowed:
+      alert = None
+      if lateral_allowed:
+        alert = EngagementAlert(AudibleAlert.engage)
+      else:
+        alert = EngagementAlert(AudibleAlert.disengage)
+      self.AM.add_many(self.sm.frame, [alert])
+
+  def update_cruise_previously_engaged(self):
+    """
+    This checks if openpilot has been fully engaged at least once after cruise was turned on. This is tracked because
+    some cars will give cruise faults if we send lateral commands immediately upon turning cruise main on.
+    """
+    if not self.cruise_available:
+      self.cruise_previously_engaged = False
+    self.cruise_previously_engaged |= self.op_active
+
+  def check_aol_state(self) -> bool:
+    """
+    Checks if we meet the panda lateral allowed requirements
+    """
+    if not self.enabled:
+      return False
+
+    if self.disabled:
+      return False
+
+    # When using cruise state to check if aol is enabled we check if cruise is available (on).
+    # If we do not enable on main then we check if openpilot has previously been fully engaged.
+    if self.main_enables:
+      return self.cruise_available
+    return self.cruise_previously_engaged and self.cruise_available
+
+  def update(self, car_state, op_state, car_params):
+    panda_states = self.sm['pandaStates']
+    self.op_active = op_state in ACTIVE_STATES
+
+    self.cruise_available = car_state.cruiseState.available
+    self.cruise_enabled = car_state.cruiseState.enabled
+
+    lateral_allowed = self.check_aol_state()
+    self.handle_audible_alert(lateral_allowed)
+
+    # Clear disabled state if OP is enabled or we have toggled aol off
+    # This allows rengagement by either engaging op or toggling aol off and back on
+    if op_state == State.enabled or not lateral_allowed:
+      self.disabled = False
+
+    self.update_cruise_previously_engaged()
+
+    self.braking = car_state.brakePressed or car_state.regenBraking
+    self.blinkers_active = car_state.leftBlinker or car_state.rightBlinker
+    self.standstill = car_state.vEgo <= max(car_params.minSteerSpeed, MIN_LATERAL_CONTROL_SPEED) or car_state.standstill
+    self.blinkers_low_speed = car_state.vEgo <= self.blinker_low_speed_limit
+    self.steer_fault = car_state.steerFaultTemporary or car_state.steerFaultPermanent
+    self.invalid_gear = car_state.gearShifter not in [car.CarState.GearShifter.drive, car.CarState.GearShifter.sport, car.CarState.GearShifter.low, car.CarState.GearShifter.eco]
+    self.calibrated = self.sm['liveCalibration'].calStatus == log.LiveCalibrationData.Status.calibrated
+
+    # Check events to see if we should disable or soft disable
+    self.check_event_state()
+
+    self.last_lat_allowed = lateral_allowed
+
+  @property
+  def _lat_active(self):
+
+    # Do not allow lateral if both aol and op are disengaged
+    if not self.check_aol_state():
+      return False
+
+    # Do not allow lateral for first few seconds to ensure op has properly obtained car state
+    if time.time() - self.start_time < 5:
+      return False
+
+    # If car is in a gear that does not move forward do not engage lateral
+    if self.invalid_gear:
+      return False
+
+    # If there is a steer fault lat is not available
+    if self.steer_fault:
+      return False
+
+    # If OP is not calibrated lat is not available
+    if not self.calibrated:
+      return False
+
+    # Disable lateral when vehicle is stopped to prevent "twitching" steering wheel
+    if self.standstill:
+      return False
+
+    # If DisengageLatOnBrake is enabled we disable lat while braking
+    if self.disengage_lat_on_brake and self.braking:
+      return False
+
+    # If DisengageLatOnBlinker is enabled we disable lat while blinkers are on
+    if self.disengage_lat_on_blinker and self.blinkers_active and not self.op_active:
+      return False
+
+    # If DisengageLatOnLowSpeedBlinker is enabled we disable lat while blinkers are on and we are below the blinker low speed limit
+    if self.disengage_lat_on_low_speed_blinker and (self.blinkers_active and self.blinkers_low_speed) and not self.op_active:
+      return False
+
+    # Lat is active if we pass all previous tests for disengagement
+    return True
+
+  def check_event_state(self):
+    self.soft_disable_timer = max(0, self.soft_disable_timer - 1)
+    if not self.lat_active:
+      return
+
+    if self.disabled:
+      return
+
+    if self.controls.events.contains(ET.IMMEDIATE_DISABLE):
+      self.disabled = True
+      self.soft_disabling = False
+      self.controls.state = State.disabled
+      # only alert if OP is not active as it will alert itself
+      if not self.op_active:
+        self.controls.current_alert_types.append(ET.IMMEDIATE_DISABLE)
+    elif self.soft_disabling:
+      if not self.controls.events.contains(ET.SOFT_DISABLE):
+        # no more soft disabling condition, so go back to ENABLED
+        self.soft_disabling = False
+
+      elif self.soft_disable_timer > 0:
+        self.controls.current_alert_types.append(ET.SOFT_DISABLE)
+        # only alert if OP is not active as it will alert itself
+        if not self.op_active:
+          self.controls.current_alert_types.append(ET.SOFT_DISABLE)
+
+      elif self.soft_disable_timer <= 0:
+        self.disabled = True
+        self.soft_disabling = False
+        self.controls.state = State.disabled
+    elif self.controls.events.contains(ET.SOFT_DISABLE):
+      self.soft_disabling = True
+      self.soft_disable_timer = int(SOFT_DISABLE_TIME / DT_CTRL)
+      # only alert if OP is not active as it will alert itself
+      if not self.op_active:
+        self.controls.current_alert_types.append(ET.SOFT_DISABLE)
+
+    # Ensure we send warnings when only lat is active
+    if self.lat_active:
+      self.controls.current_alert_types.append(ET.WARNING)
+
+  @property
+  def lat_active(self):
+    lat_active = self._lat_active
+
+    # push lat active to the ui
+    if self.prev_lat_active != lat_active:
+      mem_params.put_bool("LateralActive", lat_active)
+
+    self.prev_lat_active = lat_active
+    return lat_active
+
+  @staticmethod
+  def alternative_experience():
+    experience = 0
+    if params.get_bool('AlwaysOnLateralEnabled'):
+      experience = ALTERNATIVE_EXPERIENCE.ENABLE_ALWAYS_ON_LATERAL
+    return experience
diff --git a/selfdrive/controls/controlsd.py b/selfdrive/controls/controlsd.py
index 72f1514d8..5e22454e9 100755
--- a/selfdrive/controls/controlsd.py
+++ b/selfdrive/controls/controlsd.py
@@ -32,6 +32,10 @@ from openpilot.selfdrive.controls.lib.vehicle_model import VehicleModel
 
 from openpilot.system.hardware import HARDWARE
 
+# PFEIFER - AOL {{
+from openpilot.selfdrive.controls.always_on_lateral import AlwaysOnLateral
+# }} PFEIFER - AOL
+
 SOFT_DISABLE_TIME = 3  # seconds
 LDW_MIN_SPEED = 31 * CV.MPH_TO_MS
 LANE_DEPARTURE_THRESHOLD = 0.1
@@ -168,6 +172,11 @@ class Controls:
     # controlsd is driven by can recv, expected at 100Hz
     self.rk = Ratekeeper(100, print_delay_threshold=None)
 
+    # PFEIFER - AOL {{
+    self.aol = AlwaysOnLateral(self)
+    # }} PFEIFER - AOL
+
+
   def set_initial_state(self):
     if REPLAY:
       controls_state = Params().get("ReplayControlsState")
@@ -556,6 +565,11 @@ class Controls:
     standstill = CS.vEgo <= max(self.CP.minSteerSpeed, MIN_LATERAL_CONTROL_SPEED) or CS.standstill
     CC.latActive = self.active and not CS.steerFaultTemporary and not CS.steerFaultPermanent and \
                    (not standstill or self.joystick_mode)
+    # PFEIFER - AOL {{
+    self.aol.update(CS, self.state, self.CP)
+    if self.aol.enabled:
+        CC.latActive = self.aol.lat_active
+    # }} PFEIFER - AOL
     CC.longActive = self.enabled and not self.events.contains(ET.OVERRIDE_LONGITUDINAL) and self.CP.openpilotLongitudinalControl
 
     actuators = CC.actuators
diff --git a/selfdrive/ui/qt/offroad/settings.cc b/selfdrive/ui/qt/offroad/settings.cc
index 1c4e14446..3f07a8412 100644
--- a/selfdrive/ui/qt/offroad/settings.cc
+++ b/selfdrive/ui/qt/offroad/settings.cc
@@ -63,6 +63,42 @@ TogglesPanel::TogglesPanel(SettingsWindow *parent) : ListWidget(parent) {
       tr("Display speed in km/h instead of mph."),
       "../assets/offroad/icon_metric.png",
     },
+    // PFEIFER - AOL {{
+    {
+      "AlwaysOnLateralEnabled",
+      tr("Always on Lateral"),
+      QString("<b>%1</b><br><br>%2")
+      .arg(tr("WARNING: Always on lateral has not been tested on all cars. You may receive cruise faults when disabling longitudinal control if this is not compatible with your car. Please test in a safe environment before using on road."))
+      .arg(tr("When enabled lateral control will remain engaged after longitudinal is disengaged. Main cruise button toggles lateral control off.")),
+      "../assets/img_experimental_white.svg",
+    },
+    {
+      "AlwaysOnLateralMainEnables",
+      tr("Main cruise engages AOL"),
+      QString("<b>%1</b><br><br>%2")
+      .arg(tr("WARNING: Engaging lateral upon toggling main cruise likely has issues with many cars. You may receive cruise faults upon pressing the main cruise button. Please test in a safe environment before using on road."))
+      .arg(tr("Engages Always on Lateral whenever main is pressed.")),
+      "../assets/img_experimental_white.svg",
+    },
+    {
+      "DisengageLatOnBrake",
+      tr("Disengage Lateral on Brake Pedal"),
+      tr("Disables lateral while the brake is being applied. Only changes behavior of Always on Lateral."),
+      "../assets/img_experimental_white.svg",
+    },
+    {
+      "DisengageLatOnBlinker",
+      tr("Disengage Lateral on Blinker"),
+      tr("Disables lateral while a blinker is activated. Only changes behavior of Always on Lateral."),
+      "../assets/img_experimental_white.svg",
+    },
+    {
+      "DisengageLatOnLowSpeedBlinker",
+      tr("Disengage Lateral on Low Speed Blinker"),
+      tr("Disables lateral while a blinker is activated and we are below LatBlinkerLowSpeedLimit (default 25mph). If 'Disengage Lateral on Blinker' is also enabled lateral will still be disabled at all speeds. Only changes behavior of Always on Lateral."),
+      "../assets/img_experimental_white.svg",
+    },
+    // }} PFEIFER - AOL
 #ifdef ENABLE_MAPS
     {
       "NavSettingTime24h",
@@ -110,6 +146,10 @@ TogglesPanel::TogglesPanel(SettingsWindow *parent) : ListWidget(parent) {
   toggles["ExperimentalMode"]->setActiveIcon("../assets/img_experimental.svg");
   toggles["ExperimentalMode"]->setConfirmation(true, true);
   toggles["ExperimentalLongitudinalEnabled"]->setConfirmation(true, false);
+  // PFEIFER - AOL {{
+  toggles["AlwaysOnLateralEnabled"]->setConfirmation(true, true);
+  toggles["AlwaysOnLateralMainEnables"]->setConfirmation(true, true);
+  // }} PFEIFER - AOL
 
   connect(toggles["ExperimentalLongitudinalEnabled"], &ToggleControl::toggleFlipped, [=]() {
     updateToggles();
@@ -159,6 +199,23 @@ void TogglesPanel::updateToggles() {
                                   .arg(tr("The driving visualization will transition to the road-facing wide-angle camera at low speeds to better show some turns. The Experimental mode logo will also be shown in the top right corner. "
                                           "When a navigation destination is set and the driving model is using it as input, the driving path on the map will turn green."));
 
+  // PFEIFER - AOL {{
+  // Disable all AOL toggles while on-road
+  // AlwaysOnLateralMainEnables and DisengageLatOnBrake will cause errors if toggled on-road
+  // DisengageLatOnBlinker and DisengageLatOnBrake are disabled so we do not need to read them from the fs on each controls loop
+  auto aol_toggle = toggles["AlwaysOnLateralEnabled"];
+  auto aol_main_toggle = toggles["AlwaysOnLateralMainEnables"];
+  auto dlobrake_toggle = toggles["DisengageLatOnBrake"];
+  auto dloblinker_toggle = toggles["DisengageLatOnBlinker"];
+  auto dlolsblinker_toggle = toggles["DisengageLatOnLowSpeedBlinker"];
+  bool aol_locked = params.getBool("AlwaysOnLateralEnabledLock");
+  aol_toggle->setEnabled(!aol_locked);
+  aol_main_toggle->setEnabled(!aol_locked);
+  dlobrake_toggle->setEnabled(!aol_locked);
+  dloblinker_toggle->setEnabled(!aol_locked);
+  dlolsblinker_toggle->setEnabled(!aol_locked);
+  // }} PFEIFER - AOL
+
   const bool is_release = params.getBool("IsReleaseBranch");
   auto cp_bytes = params.get("CarParamsPersistent");
   if (!cp_bytes.empty()) {
diff --git a/selfdrive/ui/qt/onroad.cc b/selfdrive/ui/qt/onroad.cc
index 5d562d6e2..31963f43e 100644
--- a/selfdrive/ui/qt/onroad.cc
+++ b/selfdrive/ui/qt/onroad.cc
@@ -83,6 +83,11 @@ void OnroadWindow::updateState(const UIState &s) {
   nvg->updateState(s);
 
   QColor bgColor = bg_colors[s.status];
+  // PFEIFER - AOL {{
+  if(s.status == STATUS_DISENGAGED && Params("/dev/shm/params").getBool("LateralActive")){
+      bgColor = bg_colors[STATUS_LAT_ACTIVE];
+  }
+  // }} PFEIFER - AOL
   if (bg != bgColor) {
     // repaint border
     bg = bgColor;
diff --git a/selfdrive/ui/ui.h b/selfdrive/ui/ui.h
index d639d85ee..b02531c72 100644
--- a/selfdrive/ui/ui.h
+++ b/selfdrive/ui/ui.h
@@ -50,6 +50,9 @@ typedef enum UIStatus {
   STATUS_DISENGAGED,
   STATUS_OVERRIDE,
   STATUS_ENGAGED,
+  // PFEIFER - AOL {{
+  STATUS_LAT_ACTIVE,
+  // }} PFEIFER - AOL
 } UIStatus;
 
 enum PrimeType {
@@ -66,6 +69,9 @@ const QColor bg_colors [] = {
   [STATUS_DISENGAGED] = QColor(0x17, 0x33, 0x49, 0xc8),
   [STATUS_OVERRIDE] = QColor(0x91, 0x9b, 0x95, 0xf1),
   [STATUS_ENGAGED] = QColor(0x17, 0x86, 0x44, 0xf1),
+  // PFEIFER - AOL {{
+  [STATUS_LAT_ACTIVE] = QColor(0x6f, 0xc0, 0xc9, 0xf1),
+  // }} PFEIFER - AOL
 };
 
 
-- 
2.39.3 (Apple Git-145)

