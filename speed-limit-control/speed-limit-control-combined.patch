From 47ea1417437a991d6fe589c9d3259868a2d7ea5c Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Sat, 10 Jun 2023 15:04:21 -0400
Subject: [PATCH 1/3] button manager

---
 release/files_common                 |   2 +
 selfdrive/controls/button_manager.py | 214 +++++++++++++++++++++++++++
 2 files changed, 216 insertions(+)
 create mode 100644 selfdrive/controls/button_manager.py

diff --git a/release/files_common b/release/files_common
index 34d8f0097..e462ff565 100644
--- a/release/files_common
+++ b/release/files_common
@@ -565,3 +565,5 @@ tinygrad_repo/tinygrad/runtime/ops_disk.py
 tinygrad_repo/tinygrad/runtime/ops_gpu.py
 tinygrad_repo/tinygrad/shape/*
 tinygrad_repo/tinygrad/*.py
+
+selfdrive/controls/button_manager.py
diff --git a/selfdrive/controls/button_manager.py b/selfdrive/controls/button_manager.py
new file mode 100644
index 000000000..343cf6396
--- /dev/null
+++ b/selfdrive/controls/button_manager.py
@@ -0,0 +1,214 @@
+# PFEIFER - BM
+
+from openpilot.common.params import Params
+from enum import IntEnum
+from time import time
+import json
+
+mem_params = Params("/dev/shm/params")
+
+LONG_PRESS_LENGTH = 0.4 #s
+PRESS_INTERVAL = 0.2 #s
+DEBOUNCE_LENGTH = 0.04 #s
+
+class ButtonState(IntEnum):
+  VOID = 0
+  WAITING_SINGLE_RELEASE = 1
+  LONG_PRESS_WAITING_RELEASE = 2
+  LONG_PRESS = 3
+  SINGLE_PRESS_WAITING_DOUBLE = 4
+  SINGLE_PRESS = 5
+  DOUBLE_PRESS_WAITING_RELEASE = 6
+  DOUBLE_PRESS_WAITING_TRIPLE = 7
+  DOUBLE_PRESS = 8
+  TRIPLE_PRESS_WAITING_RELEASE = 9
+  TRIPLE_PRESS = 10
+
+simple_states = [ButtonState.VOID, ButtonState.LONG_PRESS, ButtonState.SINGLE_PRESS, ButtonState.DOUBLE_PRESS, ButtonState.TRIPLE_PRESS]
+
+class Button:
+  name: str
+  state: ButtonState = ButtonState.VOID
+  transition_id: int = 0
+  last_transition_time: float = time()
+
+  def __init__(self, name: str) -> None:
+    self.name = name
+
+    self.write_state()
+
+    self.state_transition = {
+      ButtonState.VOID: self.update_void_state,
+      ButtonState.WAITING_SINGLE_RELEASE: self.update_waiting_single_release_state,
+      ButtonState.LONG_PRESS_WAITING_RELEASE: self.update_long_press_waiting_release_state,
+      ButtonState.LONG_PRESS: self.update_long_press_state,
+      ButtonState.SINGLE_PRESS_WAITING_DOUBLE: self.update_single_press_waiting_double_state,
+      ButtonState.SINGLE_PRESS: self.update_single_press_state,
+      ButtonState.DOUBLE_PRESS_WAITING_RELEASE: self.update_double_press_waiting_release_state,
+      ButtonState.DOUBLE_PRESS_WAITING_TRIPLE: self.update_double_press_waiting_triple_state,
+      ButtonState.DOUBLE_PRESS: self.update_double_press_state,
+      ButtonState.TRIPLE_PRESS_WAITING_RELEASE: self.update_triple_press_waiting_release_state,
+      ButtonState.TRIPLE_PRESS: self.update_triple_press_state,
+    }
+
+  def update_transition_time(self) -> None:
+    self.last_transition_time = time()
+
+  def press_interval_elapsed(self) -> bool:
+    return (time() - self.last_transition_time) > PRESS_INTERVAL
+
+  def long_press_length_elapsed(self) -> bool:
+    return (time() - self.last_transition_time) > LONG_PRESS_LENGTH
+
+  def debounce_length_elapsed(self) -> bool:
+    return (time() - self.last_transition_time) > DEBOUNCE_LENGTH
+
+
+  @property
+  def simple_state(self) -> ButtonState:
+    """
+    For most transitional states this returns void. For transitional states that
+    only have a single possible final state this returns the final state.
+    Possible output states are the following: VOID, LONG_PRESS, SINGLE_PRESS,
+    DOUBLE_PRESS, TRIPLE_PRESS
+    """
+    if self.state in simple_states:
+      return self.state
+
+    if self.state == ButtonState.TRIPLE_PRESS_WAITING_RELEASE:
+      return ButtonState.TRIPLE_PRESS
+
+    if self.state == ButtonState.LONG_PRESS_WAITING_RELEASE:
+      return ButtonState.LONG_PRESS
+
+    return ButtonState.VOID
+
+  @property
+  def simple_transition_id(self) -> int:
+    """
+    If a state only has a single possible final state this returns the next
+    transition id, otherwise it responds with the current transition id. Useful
+    For determining changes in simple state.
+    """
+    if self.state == ButtonState.TRIPLE_PRESS_WAITING_RELEASE:
+      return self.transition_id + 1
+
+    if self.state == ButtonState.LONG_PRESS_WAITING_RELEASE:
+      return self.transition_id + 1
+
+    return self.transition_id
+
+  @property
+  def dict(self):
+    return {
+      "state": int(self.state),
+      "transition_id": self.transition_id,
+      "last_transition_time": self.last_transition_time
+    }
+
+  def write_state(self) -> None:
+    mem_params.put(self.name, json.dumps(self.dict))
+
+  def load_state(self) -> None:
+    try:
+      state_dict = json.loads(mem_params.get(self.name))
+      self.state = ButtonState(state_dict["state"])
+      self.transition_id = state_dict["transition_id"]
+      self.last_transition_time = state_dict["last_transition_time"]
+    except:
+      self.state = ButtonState.VOID
+      self.transition_id = 0
+      self.last_transition_time = time()
+
+  def update(self, button_pressed: bool, load_state = True, write_state = True) -> ButtonState:
+    if load_state:
+      self.load_state()
+
+    if not self.debounce_length_elapsed():
+      return self.state
+
+    state = self.state_transition[self.state](button_pressed)
+
+    if self.state != state:
+      self.state = state
+      self.transition_id += 1
+      self.update_transition_time()
+      if write_state:
+        self.write_state()
+
+    return self.state
+
+  # ---------------- STATE TRANSITIONS ----------------------------
+  def update_void_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed:
+      return ButtonState.WAITING_SINGLE_RELEASE
+
+    return self.state
+
+  def update_waiting_single_release_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed and self.long_press_length_elapsed():
+      return ButtonState.LONG_PRESS_WAITING_RELEASE
+
+    if not button_pressed:
+      return ButtonState.SINGLE_PRESS_WAITING_DOUBLE
+
+    return self.state
+
+  def update_long_press_waiting_release_state(self, button_pressed: bool) -> ButtonState:
+    if not button_pressed:
+      return ButtonState.LONG_PRESS
+
+    return self.state
+
+  def update_long_press_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed:
+      return ButtonState.WAITING_SINGLE_RELEASE
+
+    return self.state
+
+  def update_single_press_waiting_double_state(self, button_pressed: bool) -> ButtonState:
+    if not button_pressed and self.press_interval_elapsed():
+      return ButtonState.SINGLE_PRESS
+
+    if button_pressed:
+      return ButtonState.DOUBLE_PRESS_WAITING_RELEASE
+
+    return self.state
+
+  def update_single_press_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed:
+      return ButtonState.WAITING_SINGLE_RELEASE
+
+    return self.state
+
+  def update_double_press_waiting_release_state(self, button_pressed: bool) -> ButtonState:
+      if not button_pressed:
+        return ButtonState.DOUBLE_PRESS_WAITING_TRIPLE
+
+      return self.state
+
+  def update_double_press_waiting_triple_state(self, button_pressed: bool) -> ButtonState:
+      if not button_pressed and self.press_interval_elapsed():
+        return ButtonState.DOUBLE_PRESS
+      if button_pressed:
+        return ButtonState.TRIPLE_PRESS_WAITING_RELEASE
+
+      return self.state
+
+  def update_double_press_state(self, button_pressed: bool) -> ButtonState:
+      if button_pressed:
+        return ButtonState.WAITING_SINGLE_RELEASE
+
+      return self.state
+
+  def update_triple_press_waiting_release_state(self, button_pressed: bool) -> ButtonState:
+    if not button_pressed:
+        return ButtonState.TRIPLE_PRESS
+
+    return self.state
+
+  def update_triple_press_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed:
+      return ButtonState.WAITING_SINGLE_RELEASE
+
+    return self.state
-- 
2.39.2


From d0d432fa74f68c6d68eaffb82b14810741adb825 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Sat, 24 Jun 2023 17:59:36 -0400
Subject: [PATCH 2/3] gap adjust button

---
 common/params.cc                        |  4 ++++
 release/files_common                    |  1 +
 selfdrive/car/gm/carstate.py            |  9 +++++++++
 selfdrive/car/hyundai/interface.py      |  9 +++++++++
 selfdrive/car/toyota/carstate.py        | 12 ++++++++++++
 selfdrive/controls/gap_adjust_button.py | 13 +++++++++++++
 6 files changed, 48 insertions(+)
 create mode 100644 selfdrive/controls/gap_adjust_button.py

diff --git a/common/params.cc b/common/params.cc
index 233016017..c01eb8874 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -207,6 +207,10 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"UpdaterTargetBranch", CLEAR_ON_MANAGER_START},
     {"UpdaterLastFetchTime", PERSISTENT},
     {"Version", PERSISTENT},
+
+    // PFEIFER - GAB {{
+    {"GapAdjustButton", PERSISTENT},
+    // }} PFEIFER - GAB
 };
 
 } // namespace
diff --git a/release/files_common b/release/files_common
index e462ff565..bb5c9e735 100644
--- a/release/files_common
+++ b/release/files_common
@@ -567,3 +567,4 @@ tinygrad_repo/tinygrad/shape/*
 tinygrad_repo/tinygrad/*.py
 
 selfdrive/controls/button_manager.py
+selfdrive/controls/gap_adjust_button.py
diff --git a/selfdrive/car/gm/carstate.py b/selfdrive/car/gm/carstate.py
index a1129c59c..bed3f2bf7 100644
--- a/selfdrive/car/gm/carstate.py
+++ b/selfdrive/car/gm/carstate.py
@@ -7,6 +7,10 @@ from opendbc.can.parser import CANParser
 from openpilot.selfdrive.car.interfaces import CarStateBase
 from openpilot.selfdrive.car.gm.values import DBC, AccState, CanBus, STEER_THRESHOLD
 
+# PFEIFER - GAB {{
+from openpilot.selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 TransmissionType = car.CarParams.TransmissionType
 NetworkLocation = car.CarParams.NetworkLocation
 STANDSTILL_THRESHOLD = 10 * 0.0311 * CV.KPH_TO_MS
@@ -32,6 +36,11 @@ class CarState(CarStateBase):
   def update(self, pt_cp, cam_cp, loopback_cp):
     ret = car.CarState.new_message()
 
+    # PFEIFER - GAB {{
+    distance_button_pressed = pt_cp.vl["ASCMSteeringButton"]["DistanceButton"] != 0
+    gap_adjust_button.update(distance_button_pressed)
+    # }} PFEIFER - GAB
+
     self.prev_cruise_buttons = self.cruise_buttons
     self.prev_distance_button = self.distance_button
     self.cruise_buttons = pt_cp.vl["ASCMSteeringButton"]["ACCButtons"]
diff --git a/selfdrive/car/hyundai/interface.py b/selfdrive/car/hyundai/interface.py
index 00452a9ae..eae0b4e45 100644
--- a/selfdrive/car/hyundai/interface.py
+++ b/selfdrive/car/hyundai/interface.py
@@ -9,6 +9,10 @@ from openpilot.selfdrive.car import create_button_events, get_safety_config
 from openpilot.selfdrive.car.interfaces import CarInterfaceBase
 from openpilot.selfdrive.car.disable_ecu import disable_ecu
 
+# PFEIFER - GAB {{
+from openpilot.selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 Ecu = car.CarParams.Ecu
 ButtonType = car.CarState.ButtonEvent.Type
 EventName = car.CarEvent.EventName
@@ -158,6 +162,11 @@ class CarInterface(CarInterfaceBase):
     if self.CS.CP.openpilotLongitudinalControl:
       ret.buttonEvents = create_button_events(self.CS.cruise_buttons[-1], self.CS.prev_cruise_buttons, BUTTONS_DICT)
 
+    # PFEIFER - GAB {{
+    gap_button_pressed = (self.CS.cruise_buttons[-1] == Buttons.GAP_DIST)
+    gap_adjust_button.update(gap_button_pressed)
+    # }} PFEIFER - GAB
+
     # On some newer model years, the CANCEL button acts as a pause/resume button based on the PCM state
     # To avoid re-engaging when openpilot cancels, check user engagement intention via buttons
     # Main button also can trigger an engagement on these cars
diff --git a/selfdrive/car/toyota/carstate.py b/selfdrive/car/toyota/carstate.py
index 8315f24ae..4ef380366 100644
--- a/selfdrive/car/toyota/carstate.py
+++ b/selfdrive/car/toyota/carstate.py
@@ -11,6 +11,10 @@ from openpilot.selfdrive.car.interfaces import CarStateBase
 from openpilot.selfdrive.car.toyota.values import ToyotaFlags, CAR, DBC, STEER_THRESHOLD, NO_STOP_TIMER_CAR, \
                                                   TSS2_CAR, RADAR_ACC_CAR, EPS_SCALE, UNSUPPORTED_DSU_CAR
 
+# PFEIFER - GAB {{
+from openpilot.selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 SteerControlType = car.CarParams.SteerControlType
 
 # These steering fault definitions seem to be common across LKA (torque) and LTA (angle):
@@ -175,6 +179,14 @@ class CarState(CarStateBase):
       else:
         self.distance_button = cp.vl["SDSU"]["FD_BUTTON"]
 
+    # PFEIFER - GAB {{
+    distance_button_pressed = False
+    if self.CP.carFingerprint in TSS2_CAR:
+      if 'DISTANCE' in cp_acc.vl["ACC_CONTROL"]:
+        distance_button_pressed = cp_acc.vl["ACC_CONTROL"]["DISTANCE"] == 1
+        gap_adjust_button.update(distance_button_pressed)
+    # }} PFEIFER - GAB
+
     return ret
 
   @staticmethod
diff --git a/selfdrive/controls/gap_adjust_button.py b/selfdrive/controls/gap_adjust_button.py
new file mode 100644
index 000000000..f34ff3a7f
--- /dev/null
+++ b/selfdrive/controls/gap_adjust_button.py
@@ -0,0 +1,13 @@
+# PFEIFER - GAB
+
+# Acknowledgements:
+# HKG button state was pulled from sunnypilot. https://github.com/sunnyhaibin/sunnypilot
+# GM button state was pulled from OPGM. https://github.com/opgm/openpilot
+# Toyota button state was pulled from Frogpilot who pulled it from krkeegan. https://github.com/FrogAi/FrogPilot | https://github.com/krkeegan/openpilot
+
+from openpilot.selfdrive.controls.button_manager import Button, ButtonState
+
+# export button state so only one import is necessary
+GapButtonState = ButtonState
+
+gap_adjust_button = Button("GapAdjustButton")
-- 
2.39.2


From 6d1854e1ab7c11f46c088ae181737f94850d725c Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Wed, 14 Jun 2023 19:43:11 -0400
Subject: [PATCH 3/3] Speed Limit Controller

Limits the speed based on the current speed limit.
---
 common/params.cc                              |  11 ++
 release/files_common                          |   1 +
 selfdrive/car/hyundai/carstate.py             |  25 +++
 .../controls/lib/longitudinal_planner.py      |  10 ++
 selfdrive/controls/speed_limit_controller.py  | 152 ++++++++++++++++++
 selfdrive/navd/navd.py                        |  18 +++
 selfdrive/ui/qt/offroad/settings.cc           |  20 +++
 selfdrive/ui/qt/onroad/annotated_camera.cc    |  17 ++
 8 files changed, 254 insertions(+)
 create mode 100644 selfdrive/controls/speed_limit_controller.py

diff --git a/common/params.cc b/common/params.cc
index c01eb8874..687c9a5c9 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -211,6 +211,17 @@ std::unordered_map<std::string, uint32_t> keys = {
     // PFEIFER - GAB {{
     {"GapAdjustButton", PERSISTENT},
     // }} PFEIFER - GAB
+    // PFEIFER - SLC {{
+    {"NavSpeedLimitControl", PERSISTENT},
+    {"MapSpeedLimitControl", PERSISTENT},
+    {"CarSpeedLimitControl", PERSISTENT},
+    {"MapSpeedLimit", PERSISTENT},
+    {"NextMapSpeedLimit", PERSISTENT},
+    {"MapAdvisoryLimit", PERSISTENT},
+    {"NavSpeedLimit", PERSISTENT},
+    {"CarSpeedLimit", PERSISTENT},
+    {"SpeedLimitOffset", PERSISTENT},
+    // }} PFEIFER - SLC
 };
 
 } // namespace
diff --git a/release/files_common b/release/files_common
index bb5c9e735..70e139f87 100644
--- a/release/files_common
+++ b/release/files_common
@@ -568,3 +568,4 @@ tinygrad_repo/tinygrad/*.py
 
 selfdrive/controls/button_manager.py
 selfdrive/controls/gap_adjust_button.py
+selfdrive/controls/speed_limit_controller.py
diff --git a/selfdrive/car/hyundai/carstate.py b/selfdrive/car/hyundai/carstate.py
index 92c489cf3..dc2f3cab4 100644
--- a/selfdrive/car/hyundai/carstate.py
+++ b/selfdrive/car/hyundai/carstate.py
@@ -11,6 +11,10 @@ from openpilot.selfdrive.car.hyundai.values import HyundaiFlags, CAR, DBC, CAN_G
                                                    CANFD_CAR, Buttons, CarControllerParams
 from openpilot.selfdrive.car.interfaces import CarStateBase
 
+# PFEIFER - SLC {{
+from openpilot.selfdrive.controls.speed_limit_controller import slc
+# }} PFEIFER - SLC
+
 PREV_BUTTON_SAMPLES = 8
 CLUSTER_SAMPLE_RATE = 20  # frames
 STANDSTILL_THRESHOLD = 12 * 0.03125 * CV.KPH_TO_MS
@@ -52,6 +56,16 @@ class CarState(CarStateBase):
 
     self.params = CarControllerParams(CP)
 
+  # PFEIFER - SLC {{
+  def calculate_speed_limit(self, cp):
+    if "SpeedLim_Nav_Clu" not in cp.vl["Navi_HU"]:
+      return 0
+    speed_limit = cp.vl["Navi_HU"]["SpeedLim_Nav_Clu"]
+    speed_limit = speed_limit if speed_limit not in (0, 255) else 0
+    speed_conv = CV.KPH_TO_MS if self.is_metric else CV.MPH_TO_MS
+    return speed_limit * speed_conv
+  # }} PFEIFER - SLC
+
   def update(self, cp, cp_cam):
     if self.CP.carFingerprint in CANFD_CAR:
       return self.update_canfd(cp, cp_cam)
@@ -165,6 +179,11 @@ class CarState(CarStateBase):
     self.cruise_buttons.extend(cp.vl_all["CLU11"]["CF_Clu_CruiseSwState"])
     self.main_buttons.extend(cp.vl_all["CLU11"]["CF_Clu_CruiseSwMain"])
 
+    # PFEIFER - SLC {{
+    slc.load_state()
+    slc.car_speed_limit = self.calculate_speed_limit(cp)
+    slc.write_car_state()
+    # }} PFEIFER - SLC
     return ret
 
   def update_canfd(self, cp, cp_cam):
@@ -297,6 +316,12 @@ class CarState(CarStateBase):
     else:
       messages.append(("LVR12", 100))
 
+    # PFEIFER - SLC {{
+    messages += [
+      ("Navi_HU", 5),
+    ]
+    # }} PFEIFER - SLC
+
     return CANParser(DBC[CP.carFingerprint]["pt"], messages, 0)
 
   @staticmethod
diff --git a/selfdrive/controls/lib/longitudinal_planner.py b/selfdrive/controls/lib/longitudinal_planner.py
index 6cc6e80d3..f007f8a50 100755
--- a/selfdrive/controls/lib/longitudinal_planner.py
+++ b/selfdrive/controls/lib/longitudinal_planner.py
@@ -15,6 +15,10 @@ from openpilot.selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc import T_IDX
 from openpilot.selfdrive.controls.lib.drive_helpers import V_CRUISE_MAX, CONTROL_N, get_speed_error
 from openpilot.common.swaglog import cloudlog
 
+# PFEIFER - SLC {{
+from openpilot.selfdrive.controls.speed_limit_controller import slc
+# }} PFEIFER - SLC
+
 LON_MPC_STEP = 0.2  # first step is 0.2s
 A_CRUISE_MIN = -1.2
 A_CRUISE_MAX_VALS = [1.6, 1.2, 0.8, 0.6]
@@ -115,6 +119,12 @@ class LongitudinalPlanner:
     accel_limits_turns[0] = min(accel_limits_turns[0], self.a_desired + 0.05)
     accel_limits_turns[1] = max(accel_limits_turns[1], self.a_desired - 0.05)
 
+    # PFEIFER - SLC {{
+    slc.update_current_max_velocity(v_cruise_kph * CV.KPH_TO_MS, v_ego)
+    if slc.speed_limit > 0 and (slc.speed_limit + slc.offset) < v_cruise:
+      v_cruise = slc.speed_limit + slc.offset
+    # }} PFEIFER - SLC
+
     self.mpc.set_weights(prev_accel_constraint, personality=sm['controlsState'].personality)
     self.mpc.set_accel_limits(accel_limits_turns[0], accel_limits_turns[1])
     self.mpc.set_cur_state(self.v_desired_filter.x, self.a_desired)
diff --git a/selfdrive/controls/speed_limit_controller.py b/selfdrive/controls/speed_limit_controller.py
new file mode 100644
index 000000000..58f3ec8a4
--- /dev/null
+++ b/selfdrive/controls/speed_limit_controller.py
@@ -0,0 +1,152 @@
+from openpilot.common.params import Params
+from openpilot.common.conversions import Conversions as CV
+from openpilot.selfdrive.controls.gap_adjust_button import gap_adjust_button, GapButtonState
+import json
+import math
+
+mem_params = Params("/dev/shm/params")
+params = Params()
+
+R = 6373000.0 # approximate radius of earth in meters
+TO_RADIANS = math.pi / 180
+TO_DEGREES = 180 / math.pi
+NEXT_SPEED_DIST = 5 # seconds
+
+# points should be in radians
+# output is meters
+def distance_to_point(ax, ay, bx, by):
+  a = math.sin((bx-ax)/2)*math.sin((bx-ax)/2) + math.cos(ax) * math.cos(bx)*math.sin((by-ay)/2)*math.sin((by-ay)/2)
+  c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
+
+  return R * c  # in meters
+
+class SpeedLimitController:
+  nav_speed_limit: float = 0 # m/s
+  map_speed_limit: float = 0 # m/s
+  next_map_speed_limit: float = 0 # m/s
+  next_map_speed_limit_lat: float = 0 # deg
+  next_map_speed_limit_lon: float = 0 # deg
+  lat: float = 0 # deg
+  lon: float = 0 # deg
+  car_speed_limit: float = 0 # m/s
+  offset: float = 0 # m/s
+  nav_enabled: bool = False
+  car_enabled: bool = False
+  speed_enabled: bool = False
+  last_transition_id: int = 0
+  current_max_velocity_update_count: int = 0
+  current_velocity: float = 0
+
+  def __init__(self) -> None:
+    self.load_persistent_enabled()
+    self.write_nav_state()
+    self.write_map_state()
+    self.write_car_state()
+    self.write_offset_state()
+
+  def update_current_max_velocity(self, max_v: float, v_ego: float, load_state: bool = True, write_state: bool = True) -> None:
+    self.current_velocity = v_ego
+    self.current_max_velocity_update_count += 1
+    self.current_max_velocity_update_count = self.current_max_velocity_update_count % 100
+    if load_state:
+      self.load_state()
+      if self.current_max_velocity_update_count == 0:
+        self.load_persistent_enabled()
+
+    gap_adjust_button.load_state()
+    if self.last_transition_id != gap_adjust_button.simple_transition_id:
+      self.last_transition_id = gap_adjust_button.simple_transition_id
+      if gap_adjust_button.simple_state == GapButtonState.DOUBLE_PRESS:
+        if max_v > 0 and max_v < 38 and self.speed_limit > 0:
+          self.offset = max_v - self.speed_limit
+          if write_state:
+            self.write_offset_state()
+
+  @property
+  def speed_limit(self) -> float:
+    limit: float = 0
+    if self.map_enabled and self.next_map_speed_limit != 0:
+      d = distance_to_point(self.lat * TO_RADIANS, self.lon * TO_RADIANS, self.next_map_speed_limit_lat * TO_RADIANS, self.next_map_speed_limit_lon * TO_RADIANS)
+      max_d = NEXT_SPEED_DIST * self.current_velocity
+      if d < max_d:
+        return self.next_map_speed_limit
+
+    if self.nav_enabled and self.nav_speed_limit != 0:
+      limit = self.nav_speed_limit
+    elif self.map_enabled and self.map_speed_limit != 0:
+      limit = self.map_speed_limit
+    elif self.car_enabled and self.car_speed_limit != 0:
+      limit = self.car_speed_limit
+
+    return limit
+
+  @property
+  def speed_limit_mph(self) -> float:
+    return self.speed_limit * CV.MS_TO_MPH
+
+  @property
+  def speed_limit_kph(self) -> float:
+    return self.speed_limit * CV.MS_TO_KPH
+
+  @property
+  def offset_mph(self) -> float:
+    return self.offset * CV.MS_TO_MPH
+
+  @property
+  def offset_kph(self) -> float:
+    return self.offset * CV.MS_TO_KPH
+
+  def write_nav_state(self):
+    mem_params.put("NavSpeedLimit", json.dumps(self.nav_speed_limit))
+    mem_params.put_bool("NavSpeedLimitControl", self.nav_enabled)
+
+  def write_map_state(self):
+    mem_params.put("MapSpeedLimit", json.dumps(self.map_speed_limit))
+    mem_params.put_bool("MapSpeedLimitControl", self.map_enabled)
+
+  def write_car_state(self):
+    mem_params.put("CarSpeedLimit", json.dumps(self.car_speed_limit))
+    mem_params.put_bool("CarSpeedLimitControl", self.car_enabled)
+
+  def write_offset_state(self):
+    mem_params.put("SpeedLimitOffset", json.dumps(self.offset))
+
+  def load_state(self, load_persistent_enabled=False):
+    self.nav_enabled = mem_params.get_bool("NavSpeedLimitControl")
+    self.car_enabled = mem_params.get_bool("CarSpeedLimitControl")
+    self.map_enabled = mem_params.get_bool("MapSpeedLimitControl")
+    self.offset = json.loads(mem_params.get("SpeedLimitOffset"))
+    self.nav_speed_limit = json.loads(mem_params.get("NavSpeedLimit"))
+    self.map_speed_limit = json.loads(mem_params.get("MapSpeedLimit"))
+    try:
+      next_map_speed_limit = json.loads(mem_params.get("NextMapSpeedLimit"))
+      self.next_map_speed_limit = next_map_speed_limit["speedlimit"]
+      self.next_map_speed_limit_lat = next_map_speed_limit["latitude"]
+      self.next_map_speed_limit_lon = next_map_speed_limit["longitude"]
+    except: pass
+    try:
+      position = json.loads(mem_params.get("LastGPSPosition"))
+      self.lat = position["latitude"]
+      self.lon = position["longitude"]
+    except: pass
+    self.car_speed_limit = json.loads(mem_params.get("CarSpeedLimit"))
+
+    if load_persistent_enabled:
+      self.load_persistent_enabled()
+
+  def load_persistent_enabled(self):
+    self.nav_enabled = params.get_bool("NavSpeedLimitControl")
+    self.car_enabled = params.get_bool("CarSpeedLimitControl")
+    self.map_enabled = params.get_bool("MapSpeedLimitControl")
+    mem_params.put_bool("NavSpeedLimitControl", self.nav_enabled)
+    mem_params.put_bool("MapSpeedLimitControl", self.map_enabled)
+    mem_params.put_bool("CarSpeedLimitControl", self.car_enabled)
+
+
+  def write_persistent_enabled(self):
+    params.put_bool("NavSpeedLimitControl", self.nav_enabled)
+    params.put_bool("CarSpeedLimitControl", self.car_enabled)
+    params.put_bool("MapSpeedLimitControl", self.map_enabled)
+
+
+slc = SpeedLimitController()
diff --git a/selfdrive/navd/navd.py b/selfdrive/navd/navd.py
index 8cfc495f2..0e0df082b 100755
--- a/selfdrive/navd/navd.py
+++ b/selfdrive/navd/navd.py
@@ -17,6 +17,10 @@ from openpilot.selfdrive.navd.helpers import (Coordinate, coordinate_from_param,
                                     parse_banner_instructions)
 from openpilot.common.swaglog import cloudlog
 
+# PFEIFER - SLC {{
+from openpilot.selfdrive.controls.speed_limit_controller import slc
+# }} PFEIFER - SLC
+
 REROUTE_DISTANCE = 25
 MANEUVER_TRANSITION_THRESHOLD = 10
 REROUTE_COUNTER_MIN = 3
@@ -206,6 +210,11 @@ class RouteEngine:
 
     if self.step_idx is None:
       msg.valid = False
+      # PFEIFER - SLC {{
+      slc.load_state()
+      slc.nav_speed_limit = 0
+      slc.write_nav_state()
+      # }} PFEIFER - SLC
       self.pm.send('navInstruction', msg)
       return
 
@@ -280,6 +289,15 @@ class RouteEngine:
 
     if ('maxspeed' in closest.annotations) and self.localizer_valid:
       msg.navInstruction.speedLimit = closest.annotations['maxspeed']
+    # PFEIFER - SLC {{
+      slc.load_state()
+      slc.nav_speed_limit = closest.annotations['maxspeed']
+      slc.write_nav_state()
+    if not self.localizer_valid or ('maxspeed' not in closest.annotations):
+      slc.load_state()
+      slc.nav_speed_limit = 0
+      slc.write_nav_state()
+    # }} PFEIFER - SLC
 
     # Speed limit sign type
     if 'speedLimitSign' in step:
diff --git a/selfdrive/ui/qt/offroad/settings.cc b/selfdrive/ui/qt/offroad/settings.cc
index 96fe6585c..32144f45f 100644
--- a/selfdrive/ui/qt/offroad/settings.cc
+++ b/selfdrive/ui/qt/offroad/settings.cc
@@ -69,6 +69,26 @@ TogglesPanel::TogglesPanel(SettingsWindow *parent) : ListWidget(parent) {
       tr("Display speed in km/h instead of mph."),
       "../assets/offroad/icon_metric.png",
     },
+    // PFEIFER - SLC {{
+    {
+      "NavSpeedLimitControl",
+      tr("Nav Speed Limit Control"),
+      tr("Enables Nav Speed Limit Control. When enabled openpilot will adjust to the speed limit supplied by nav instructions. On some cars double pressing the gap adjust button will set an offset using the current set max speed minus the speed limit."),
+      "../assets/img_experimental_white.svg",
+    },
+    {
+      "MapSpeedLimitControl",
+      tr("Map Speed Limit Control"),
+      tr("Enables Map Speed Limit Control. When enabled openpilot will adjust to the speed limit supplied by openstreetmap (mapd). On some cars double pressing the gap adjust button will set an offset using the current set max speed minus the speed limit."),
+      "../assets/img_experimental_white.svg",
+    },
+    {
+      "CarSpeedLimitControl",
+      tr("Car Speed Limit Control"),
+      tr("Enables Car Speed Limit Control. When enabled openpilot will adjust to the speed limit supplied by the car on some cars. On some cars double pressing the gap adjust button will set an offset using the current set max speed minus the speed limit."),
+      "../assets/img_experimental_white.svg",
+    },
+    // }} PFEIFER - SLC
 #ifdef ENABLE_MAPS
     {
       "NavSettingTime24h",
diff --git a/selfdrive/ui/qt/onroad/annotated_camera.cc b/selfdrive/ui/qt/onroad/annotated_camera.cc
index f7fb6b480..dde8ab003 100644
--- a/selfdrive/ui/qt/onroad/annotated_camera.cc
+++ b/selfdrive/ui/qt/onroad/annotated_camera.cc
@@ -61,6 +61,23 @@ void AnnotatedCameraWidget::updateState(const UIState &s) {
   hideBottomIcons = (cs.getAlertSize() != cereal::ControlsState::AlertSize::NONE);
   status = s.status;
 
+  // PFEIFER - SLC {{
+  if(speedLimit == 0) {
+    float carSpeedLimit = stof(Params("/dev/shm/params").get("CarSpeedLimit"));
+    float mapSpeedLimit = stof(Params("/dev/shm/params").get("MapSpeedLimit"));
+    if(carSpeedLimit != 0 || mapSpeedLimit != 0) {
+      speedLimit = mapSpeedLimit != 0 ? mapSpeedLimit : carSpeedLimit;
+      if(is_metric) {
+        has_eu_speed_limit = true;
+        speedLimit *= MS_TO_KPH;
+      } else {
+        has_us_speed_limit = true;
+        speedLimit *= MS_TO_MPH;
+      }
+    }
+  }
+  // }} PFEIFER - SLC
+
   // update engageability/experimental mode button
   experimental_btn->updateState(s);
 
-- 
2.39.2

