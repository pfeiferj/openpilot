From 4818820e692808c3a951a3fc8dca398ecb735561 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Fri, 29 Mar 2024 21:52:18 -0400
Subject: [PATCH] mtsc

---
 common/params.cc                              |   6 +
 release/files_common                          |   2 +
 .../controls/lib/longitudinal_planner.py      |  10 +
 selfdrive/controls/mtsc.py                    | 183 ++++++++++++++++++
 selfdrive/ui/qt/offroad/settings.cc           |   8 +
 5 files changed, 209 insertions(+)
 create mode 100644 selfdrive/controls/mtsc.py

diff --git a/common/params.cc b/common/params.cc
index 38d96a30b..fd1b19cd2 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -207,6 +207,12 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"UpdaterTargetBranch", CLEAR_ON_MANAGER_START},
     {"UpdaterLastFetchTime", PERSISTENT},
     {"Version", PERSISTENT},
+
+    // PFEIFER - MTSC {{
+    {"MapTargetVelocities", PERSISTENT},
+    {"MTSCEnabled", PERSISTENT},
+    {"MTSCMaxVDiff", PERSISTENT},
+    // }} PFEIFER - MTSC
 };
 
 } // namespace
diff --git a/release/files_common b/release/files_common
index b00f99906..700296acb 100644
--- a/release/files_common
+++ b/release/files_common
@@ -565,3 +565,5 @@ tinygrad_repo/tinygrad/runtime/ops_disk.py
 tinygrad_repo/tinygrad/runtime/ops_gpu.py
 tinygrad_repo/tinygrad/shape/*
 tinygrad_repo/tinygrad/*.py
+
+selfdrive/controls/mtsc.py
diff --git a/selfdrive/controls/lib/longitudinal_planner.py b/selfdrive/controls/lib/longitudinal_planner.py
index 6cc6e80d3..766d60971 100755
--- a/selfdrive/controls/lib/longitudinal_planner.py
+++ b/selfdrive/controls/lib/longitudinal_planner.py
@@ -15,6 +15,10 @@ from openpilot.selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc import T_IDX
 from openpilot.selfdrive.controls.lib.drive_helpers import V_CRUISE_MAX, CONTROL_N, get_speed_error
 from openpilot.common.swaglog import cloudlog
 
+# PFEIFER - MTSC {{
+from openpilot.selfdrive.controls.mtsc import mtsc
+# }} PFEIFER - MTSC
+
 LON_MPC_STEP = 0.2  # first step is 0.2s
 A_CRUISE_MIN = -1.2
 A_CRUISE_MAX_VALS = [1.6, 1.2, 0.8, 0.6]
@@ -115,6 +119,12 @@ class LongitudinalPlanner:
     accel_limits_turns[0] = min(accel_limits_turns[0], self.a_desired + 0.05)
     accel_limits_turns[1] = max(accel_limits_turns[1], self.a_desired - 0.05)
 
+    # PFEIFER - MTSC {{
+    mtsc_v = mtsc.target_speed(v_cruise, v_ego, sm['carState'].aEgo, self.j_desired_trajectory.tolist()[0])
+    if v_cruise > mtsc_v and mtsc_v != 0:
+      v_cruise = mtsc_v
+    # }} PFEIFER - MTSC
+
     self.mpc.set_weights(prev_accel_constraint, personality=sm['controlsState'].personality)
     self.mpc.set_accel_limits(accel_limits_turns[0], accel_limits_turns[1])
     self.mpc.set_cur_state(self.v_desired_filter.x, self.a_desired)
diff --git a/selfdrive/controls/mtsc.py b/selfdrive/controls/mtsc.py
new file mode 100644
index 000000000..c718b448f
--- /dev/null
+++ b/selfdrive/controls/mtsc.py
@@ -0,0 +1,183 @@
+from openpilot.common.params import Params
+from openpilot.common.conversions import Conversions as CV
+import json
+import math
+from openpilot.common.numpy_fast import interp
+from time import time
+
+mem_params = Params("/dev/shm/params")
+params = Params()
+
+R = 6373000.0 # approximate radius of earth in meters
+TO_RADIANS = math.pi / 180
+TO_DEGREES = 180 / math.pi
+TARGET_JERK = -0.6 # m/s^3 should match up with the long planner
+TARGET_ACCEL = -1.2 # m/s^2 should match up with the long planner
+TARGET_OFFSET = 1.0 # seconds - This controls how soon before the curve you reach the target velocity. It also helps
+                    # reach the target velocity when innacuracies in the distance modeling logic would cause overshoot.
+                    # The value is multiplied against the target velocity to determine the additional distance. This is
+                    # done to keep the distance calculations consistent but results in the offset actually being less
+                    # time than specified depending on how much of a speed diffrential there is between v_ego and the
+                    # target velocity.
+
+def calculate_accel(t, target_jerk, a_ego):
+  return a_ego  + target_jerk * t
+
+def calculate_velocity(t, target_jerk, a_ego, v_ego):
+  return v_ego + a_ego * t + target_jerk/2 * (t ** 2)
+
+def calculate_distance(t, target_jerk, a_ego, v_ego):
+  return t * v_ego + a_ego/2 * (t ** 2) + target_jerk/6 * (t ** 3)
+
+
+# points should be in radians
+# output is meters
+def distance_to_point(ax, ay, bx, by):
+  a = math.sin((bx-ax)/2)*math.sin((bx-ax)/2) + math.cos(ax) * math.cos(bx)*math.sin((by-ay)/2)*math.sin((by-ay)/2)
+  c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
+
+  return R * c  # in meters
+
+class MapTurnSpeedController:
+  def __init__(self):
+    self.enabled = params.get_bool("MTSCEnabled")
+    self.last_params_update = time()
+    self.target_lat = 0.0
+    self.target_lon = 0.0
+    self.target_v = 0.0
+    self.max_diff = 0.0
+    try:
+      self.max_diff = float(params.get("MTSCMaxVDiff"))
+    except: pass
+
+  def update_params(self):
+    t = time()
+    if t > self.last_params_update + 5.0:
+      self.enabled = params.get_bool("MTSCEnabled")
+      self.last_params_update = t
+
+  def target_speed(self, v_max, v_ego, a_ego, j_ego) -> float:
+    self.update_params()
+
+    if not self.enabled:
+      return 0.0
+
+    lat = 0.0
+    lon = 0.0
+    try:
+      position = json.loads(mem_params.get("LastGPSPosition"))
+      lat = position["latitude"]
+      lon = position["longitude"]
+    except: return 0.0
+
+    try:
+      target_velocities = json.loads(mem_params.get("MapTargetVelocities"))
+    except: return 0.0
+
+    min_dist = 1000
+    min_idx = 0
+    distances = []
+
+    # find our location in the path
+    for i in range(len(target_velocities)):
+      target_velocity = target_velocities[i]
+      tlat = target_velocity["latitude"]
+      tlon = target_velocity["longitude"]
+      d = distance_to_point(lat * TO_RADIANS, lon * TO_RADIANS, tlat * TO_RADIANS, tlon * TO_RADIANS)
+      distances.append(d)
+      if d < min_dist:
+        min_dist = d
+        min_idx = i
+
+    # only look at values from our current position forward
+    forward_points = target_velocities[min_idx:]
+    forward_distances = distances[min_idx:]
+
+    # find velocities that we are within the distance we need to adjust for
+    valid_velocities = []
+    for i in range(len(forward_points)):
+      target_velocity = forward_points[i]
+      tlat = target_velocity["latitude"]
+      tlon = target_velocity["longitude"]
+      tv = target_velocity["velocity"]
+      if tv > v_max:
+        continue
+      if tv > v_ego:
+        continue
+
+      d = forward_distances[i]
+
+      a_diff = (a_ego - TARGET_ACCEL)
+      accel_t = abs(a_diff / TARGET_JERK)
+      if tv > v_ego:
+        v_calc = v_max
+      else:
+        v_calc = v_ego
+
+      min_accel_v = calculate_velocity(accel_t, TARGET_JERK, a_ego, v_calc)
+
+      max_d = 0
+      if tv > min_accel_v:
+        # calculate time needed based on target jerk
+        a = 0.5 * TARGET_JERK
+        b = a_ego
+        c = v_calc - tv
+        t_a = -1 * ((b**2 - 4 * a * c) ** 0.5 + b) / 2 * a
+        t_b = ((b**2 - 4 * a * c) ** 0.5 - b) / 2 * a
+        if not isinstance(t_a, complex) and t_a > 0:
+          t = t_a
+        else:
+          t = t_b
+        if isinstance(t, complex):
+          continue
+
+        max_d = max_d + calculate_distance(t, TARGET_JERK, a_ego, v_calc)
+
+      else:
+        t = accel_t
+        max_d = calculate_distance(t, TARGET_JERK, a_ego, v_calc)
+
+        # calculate additional time needed based on target accel
+        t = abs((min_accel_v - tv) / TARGET_ACCEL)
+        max_d += calculate_distance(t, 0, TARGET_ACCEL, min_accel_v)
+
+      if d < max_d + tv * TARGET_OFFSET:
+        valid_velocities.append((float(tv), tlat, tlon))
+
+    # Find the smallest velocity we need to adjust for
+    min_v = 100.0
+    target_lat = 0.0
+    target_lon = 0.0
+    for tv, lat, lon in valid_velocities:
+      if tv < min_v:
+        min_v = tv
+        target_lat = lat
+        target_lon = lon
+
+    if self.target_v < min_v and not (self.target_lat == 0 and self.target_lon == 0):
+      for i in range(len(forward_points)):
+        target_velocity = forward_points[i]
+        tlat = target_velocity["latitude"]
+        tlon = target_velocity["longitude"]
+        tv = target_velocity["velocity"]
+        if tv > v_max:
+          continue
+
+        if tlat == self.target_lat and tlon == self.target_lon and tv == self.target_v:
+          return float(self.target_v)
+      # not found so lets reset
+      self.target_v = 0.0
+      self.target_lat = 0.0
+      self.target_lon = 0.0
+
+    self.target_v = min_v
+    self.target_lat = target_lat
+    self.target_lon = target_lon
+
+    # Ignore if we are exceeding the max v diff to help reject bad calculations
+    if self.max_diff != 0 and v_ego - min_v > self.max_diff:
+      return 100.0
+
+    return min_v
+
+mtsc = MapTurnSpeedController()
diff --git a/selfdrive/ui/qt/offroad/settings.cc b/selfdrive/ui/qt/offroad/settings.cc
index 1c4e14446..dacff2c0e 100644
--- a/selfdrive/ui/qt/offroad/settings.cc
+++ b/selfdrive/ui/qt/offroad/settings.cc
@@ -63,6 +63,14 @@ TogglesPanel::TogglesPanel(SettingsWindow *parent) : ListWidget(parent) {
       tr("Display speed in km/h instead of mph."),
       "../assets/offroad/icon_metric.png",
     },
+    // PFEIFER - MTSC {{
+    {
+      "MTSCEnabled",
+      tr("M-TSC - Map Turn Speed Control"),
+      tr("Enables M-TSC. When enabled, the car will slow down when it predicts a lateral acceleration greater than 2.0 m/s^2."),
+      "../assets/img_experimental_white.svg",
+    },
+    // }} PFEIFER - MTSC
 #ifdef ENABLE_MAPS
     {
       "NavSettingTime24h",
-- 
2.39.3 (Apple Git-145)

