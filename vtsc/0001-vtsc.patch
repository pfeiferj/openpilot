From d217629287303e0ea1f20f93680955499981b6f0 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Fri, 29 Mar 2024 21:49:46 -0400
Subject: [PATCH] vtsc

---
 common/params.cc                              |  4 ++
 release/files_common                          |  2 +
 .../controls/lib/longitudinal_planner.py      | 10 ++++
 selfdrive/controls/vtsc.py                    | 56 +++++++++++++++++++
 selfdrive/ui/qt/offroad/settings.cc           |  8 +++
 5 files changed, 80 insertions(+)
 create mode 100644 selfdrive/controls/vtsc.py

diff --git a/common/params.cc b/common/params.cc
index 233016017..185267cf9 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -207,6 +207,10 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"UpdaterTargetBranch", CLEAR_ON_MANAGER_START},
     {"UpdaterLastFetchTime", PERSISTENT},
     {"Version", PERSISTENT},
+
+    // PFEIFER - VTSC {{
+    {"TurnVisionControl", PERSISTENT},
+    // }} PFEIFER - VTSC
 };
 
 } // namespace
diff --git a/release/files_common b/release/files_common
index 34d8f0097..35409c650 100644
--- a/release/files_common
+++ b/release/files_common
@@ -565,3 +565,5 @@ tinygrad_repo/tinygrad/runtime/ops_disk.py
 tinygrad_repo/tinygrad/runtime/ops_gpu.py
 tinygrad_repo/tinygrad/shape/*
 tinygrad_repo/tinygrad/*.py
+
+selfdrive/controls/vtsc.py
diff --git a/selfdrive/controls/lib/longitudinal_planner.py b/selfdrive/controls/lib/longitudinal_planner.py
index 6cc6e80d3..da935a853 100755
--- a/selfdrive/controls/lib/longitudinal_planner.py
+++ b/selfdrive/controls/lib/longitudinal_planner.py
@@ -15,6 +15,10 @@ from openpilot.selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc import T_IDX
 from openpilot.selfdrive.controls.lib.drive_helpers import V_CRUISE_MAX, CONTROL_N, get_speed_error
 from openpilot.common.swaglog import cloudlog
 
+# PFEIFER - VTSC {{
+from openpilot.selfdrive.controls.vtsc import vtsc
+# }} PFEIFER - VTSC
+
 LON_MPC_STEP = 0.2  # first step is 0.2s
 A_CRUISE_MIN = -1.2
 A_CRUISE_MAX_VALS = [1.6, 1.2, 0.8, 0.6]
@@ -115,6 +119,12 @@ class LongitudinalPlanner:
     accel_limits_turns[0] = min(accel_limits_turns[0], self.a_desired + 0.05)
     accel_limits_turns[1] = max(accel_limits_turns[1], self.a_desired - 0.05)
 
+    # PFEIFER - VTSC {{
+    vtsc.update(prev_accel_constraint, v_ego, sm)
+    if vtsc.active and v_cruise > vtsc.v_target:
+      v_cruise = vtsc.v_target
+    # }} PFEIFER - VTSC
+
     self.mpc.set_weights(prev_accel_constraint, personality=sm['controlsState'].personality)
     self.mpc.set_accel_limits(accel_limits_turns[0], accel_limits_turns[1])
     self.mpc.set_cur_state(self.v_desired_filter.x, self.a_desired)
diff --git a/selfdrive/controls/vtsc.py b/selfdrive/controls/vtsc.py
new file mode 100644
index 000000000..8a7f05007
--- /dev/null
+++ b/selfdrive/controls/vtsc.py
@@ -0,0 +1,56 @@
+# PFEIFER - VTSC
+
+# Acknowledgements:
+# Past versions of this code were based on the move-fast teams vtsc
+# implementation. (https://github.com/move-fast/openpilot) Huge thanks to them
+# for their initial implementation. I also used sunnypilot as a reference.
+# (https://github.com/sunnyhaibin/sunnypilot) Big thanks for sunny's amazing work
+
+import numpy as np
+from time import time
+from openpilot.common.params import Params
+params = Params()
+
+TARGET_LAT_A = 1.9 # m/s^2
+MIN_TARGET_V = 5 # m/s
+
+class VisionTurnController():
+  def __init__(self):
+    self.op_enabled = False
+    self.gas_pressed = False
+    self.last_params_update = 0
+    self.enabled = params.get_bool("TurnVisionControl")
+    self.v_target = MIN_TARGET_V
+
+
+  @property
+  def active(self):
+    return self.op_enabled and not self.gas_pressed and self.enabled
+
+  def update_params(self):
+    t = time()
+    if t > self.last_params_update + 5.0:
+      self.enabled = params.get_bool("TurnVisionControl")
+      self.last_params_update = t
+
+  def update(self, op_enabled, v_ego, sm):
+    self.update_params()
+    self.op_enabled = op_enabled
+    self.gas_pressed = sm['carState'].gasPressed
+
+    rate_plan = np.array(np.abs(sm['modelV2'].orientationRate.z))
+    vel_plan = np.array(sm['modelV2'].velocity.x)
+
+    # get the maximum lat accel from the model
+    predicted_lat_accels = rate_plan * vel_plan
+    self.max_pred_lat_acc = np.amax(predicted_lat_accels)
+
+    # get the maximum curve based on the current velocity
+    v_ego = max(v_ego, 0.1) # ensure a value greater than 0 for calculations
+    max_curve = self.max_pred_lat_acc / (v_ego**2)
+
+    # Get the target velocity for the maximum curve
+    self.v_target = (TARGET_LAT_A / max_curve) ** 0.5
+    self.v_target = max(self.v_target, MIN_TARGET_V)
+
+vtsc = VisionTurnController()
diff --git a/selfdrive/ui/qt/offroad/settings.cc b/selfdrive/ui/qt/offroad/settings.cc
index 96fe6585c..0eb072e8d 100644
--- a/selfdrive/ui/qt/offroad/settings.cc
+++ b/selfdrive/ui/qt/offroad/settings.cc
@@ -69,6 +69,14 @@ TogglesPanel::TogglesPanel(SettingsWindow *parent) : ListWidget(parent) {
       tr("Display speed in km/h instead of mph."),
       "../assets/offroad/icon_metric.png",
     },
+    // PFEIFER - VTSC {{
+    {
+      "TurnVisionControl",
+      tr("V-TSC - Vision Turn Speed Control"),
+      tr("Enables V-TSC. When enabled, the car will slow down when it predicts a lateral acceleration greater than 2.0 m/s^2."),
+      "../assets/img_experimental_white.svg",
+    },
+    // }} PFEIFER - VTSC
 #ifdef ENABLE_MAPS
     {
       "NavSettingTime24h",
-- 
2.39.2

